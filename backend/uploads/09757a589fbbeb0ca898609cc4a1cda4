Here is a complete, production-ready React 18 application scaffold using TypeScript, Vite, and TailwindCSS with up-to-date structure and example implementations. It includes all required configs, tooling, components, hooks, utils, types, and a README. The entry point is public/index.html.

Notes:
- Latest-stable patterns as of 2025-01+ era are reflected (React 18, TS, Vite 4, Tailwind 3/4 series, etc.).
- Hello World is shown prominently to satisfy the “Hello World” requirement.
- Ready-to-paste file set you can drop into a fresh vite@latest react-ts project and adjust as needed.

Files and content

1) public/index.html
```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>React TS Tailwind Scaffold</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
```

2) tsconfig.node.json
```json
{
  "compilerOptions": {
    "module": "CommonJS",
    "target": "ES2020",
    "strict": true,
    "esModuleInterop": true
  },
  "include": ["**/*.ts", "**/*.tsx"]
}
```

3) src/main.tsx
```tsx
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import './styles/index.css'

const rootEl = document.getElementById('root')
if (!rootEl) throw new Error('Root element not found')
createRoot(rootEl).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)
```

4) src/App.tsx
```tsx
import React from 'react'
import Nav from './components/Nav'
import Card from './components/Card'
import Button from './components/Button'
import { useFetch } from './hooks/useFetch'
import { Product } from './types'
import { formatDate } from './utils/formatDate'
import { classNames } from './utils/classNames'
import { useToggle } from './hooks/useToggle'

const App: React.FC = () => {
  const { value: isCompact, toggle } = useToggle(false)

  // Fetch a small sample of products (https://dummyjson.com/products?limit=3)
  const { data, loading, error } = useFetch<{ products: Product[] }>(
    'https://dummyjson.com/products?limit=3'
  )
  const products = data?.products ?? []

  return (
    <>
      <Nav />
      <header
        className={classNames(
          'bg-white shadow',
          isCompact ? 'py-2' : 'py-6'
        )}
      >
        <div className="container mx-auto px-4">
          <div className="grid gap-4 grid-cols-1 md:grid-cols-2 items-center">
            <div>
              <h1
                className={classNames(
                  'text-2xl md:text-4xl font-bold',
                  isCompact ? 'text-blue-600' : 'text-gray-900'
                )}
              >
                Hello World
              </h1>
              <p className="mt-2 text-sm md:text-base text-gray-600">
                React 18 + TypeScript + Vite + Tailwind scaffold. This is a
                production-ready starter with reusable components, hooks, and utilities.
              </p>
              <Button onClick={toggle} className="mt-4" aria-label="Toggle layout">
                Toggle Layout
              </Button>
            </div>
            <div className="flex items-center justify-center">
              <div className="bg-gray-50 rounded-md p-4 border border-dashed border-gray-200">
                <p className="text-sm text-gray-600">Today:</p>
                <p className="text-lg font-semibold">
                  {formatDate(new Date())}
                </p>
              </div>
            </div>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 py-6">
        <section aria-label="Product grid" className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          {loading && <p>Loading products...</p>}
          {error && <p className="text-red-600">Error: {error}</p>}
          {products.map((p) => (
            <Card key={p.id} product={p} />
          ))}
        </section>
      </main>
    </>
  )
}

export default App
```

5) src/components/Button.tsx
```tsx
import React from 'react'

type ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {
  variant?: 'primary' | 'secondary'
  children: React.ReactNode
}

const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  className = '',
  children,
  ...rest
}) => {
  const base = 'px-4 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2'
  const variantClass =
    variant === 'secondary'
      ? 'bg-gray-100 text-gray-800 hover:bg-gray-200'
      : 'bg-blue-600 text-white hover:bg-blue-500'
  return (
    <button className={`${base} ${variantClass} ${className}`} {...rest}>
      {children}
    </button>
  )
}

export default Button
```

6) src/components/Card.tsx
```tsx
import React from 'react'
import type { Product } from '../types'

type CardProps = {
  product: Product
}

const Card: React.FC<CardProps> = ({ product }) => {
  return (
    <article className="bg-white rounded-lg shadow-sm overflow-hidden flex flex-col">
      <div className="h-40 bg-gray-100 flex items-center justify-center">
        {product.thumbnail ? (
          <img src={product.thumbnail} alt={product.title} className="object-cover w-full h-full" />
        ) : (
          <span className="text-sm text-gray-500 px-2">No image</span>
        )}
      </div>
      <div className="p-4 flex-1 flex flex-col">
        <h3 className="text-lg font-semibold mb-1">{product.title}</h3>
        <div className="mt-auto flex items-center justify-between text-sm text-gray-700">
          <span>${product.price}</span>
          <span className="opacity-70">ID: {product.id}</span>
        </div>
      </div>
    </article>
  )
}

export default Card
```

7) src/components/Nav.tsx
```tsx
import React from 'react'

export default function Nav(): JSX.Element {
  return (
    <nav className="bg-white border-b border-gray-200">
      <div className="container mx-auto px-4 py-4 flex items-center justify-between">
        <div className="text-xl font-bold tracking-tight">Brand</div>
        <ul className="flex space-x-4">
          <li>
            <a href="#home" className="text-sm text-gray-700 hover:underline">
              Home
            </a>
          </li>
          <li>
            <a href="#products" className="text-sm text-gray-700 hover:underline">
              Products
            </a>
          </li>
          <li>
            <a href="#about" className="text-sm text-gray-700 hover:underline">
              About
            </a>
          </li>
        </ul>
      </div>
    </nav>
  )
}
```

8) src/hooks/useToggle.ts
```ts
import { useCallback, useState } from 'react'

export function useToggle(initial = false) {
  const [value, setValue] = useState<boolean>(initial)

  const toggle = useCallback((val?: boolean) => {
    setValue((v) => (typeof val === 'boolean' ? val : !v))
  }, [])

  return { value, toggle, setValue }
}
```

9) src/hooks/useFetch.ts
```ts
import { useEffect, useState } from 'react'

type FetchState<T> = {
  data?: T
  loading: boolean
  error?: string
}

export function useFetch<T = unknown>(
  url: string,
  options?: RequestInit
): FetchState<T> {
  const [state, setState] = useState<FetchState<T>>({ loading: true })

  useEffect(() => {
    let mounted = true
    setState({ loading: true })

    fetch(url, options)
      .then((res) => res.json())
      .then((data) => {
        if (!mounted) return
        setState({ data, loading: false })
      })
      .catch((err) => {
        if (!mounted) return
        setState({ data: undefined, loading: false, error: (err as Error).message })
      })

    return () => {
      mounted = false
    }
  }, [url, JSON.stringify(options || {})])

  return state
}
```

10) src/utils/formatDate.ts
```ts
export const formatDate = (
  date: string | number | Date,
  locale: string = 'en-US'
): string => {
  try {
    const d = new Date(date)
    return d.toLocaleDateString(locale, {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    })
  } catch {
    return String(date)
  }
}
```

11) src/utils/classNames.ts
```ts
export const classNames = (
  ...args: (string | false | null | undefined)[]
): string => {
  return args.filter(Boolean).join(' ')
}
```

12) src/types/index.ts
```ts
export type Product = {
  id: string
  title: string
  price: number
  thumbnail?: string
  createdAt?: string
}
```

13) src/styles/index.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Basic resets and typography helpers */
html, body, #root {
  height: 100%;
}
body {
  margin: 0;
  font-family: ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto;
  background-color: #f9fafb;
  color: #1f2937;
}
```

14) vite.config.ts
```ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    host: true
  }
})
```

15) tailwind.config.cjs
```js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./index.html', './src/**/*.{ts,tsx,js,jsx,css}'],
  theme: {
    extend: {
      colors: {
        brand: {
          500: '#4f46e5'
        }
      }
    }
  },
  plugins: []
}
```

16) postcss.config.cjs
```js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
}
```

17) package.json
```json
{
  "name": "react-ts-vite-tailwind-starter",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview --port 5173",
    "lint": "eslint . --ext .ts,.tsx",
    "format": "prettier --write ."
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "tailwindcss": "^3.6.0",
    "postcss": "^8.4.21",
    "autoprefixer": "^10.4.14",
    "typescript": "^5.2.2"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.0.0",
    "vite": "^4.5.0",
    "@types/react": "^18.0.38",
    "@types/react-dom": "^18.0.11",
    "eslint": "^8.55.0",
    "@typescript-eslint/parser": "^5.66.0",
    "@typescript-eslint/eslint-plugin": "^5.66.0",
    "eslint-config-prettier": "^9.0.1",
    "eslint-plugin-prettier": "^4.2.0",
    "prettier": "^2.8.6"
  }
}
```

18) .eslintrc.cjs
```js
module.exports = {
  root: true,
  env: { browser: true, es2021: true },
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 2022,
    sourceType: 'module',
    ecmaFeatures: { jsx: true }
  },
  plugins: ['@typescript-eslint', 'react', 'prettier'],
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:prettier/recommended'
  ],
  settings: {
    react: { version: 'detect' }
  },
  rules: {
    'react/react-in-jsx-scope': 'off'
  }
}
```

19) .prettierrc
```json
{
  "semi": true,
  "singleQuote": true,
  "trailingComma": "all",
  "printWidth": 100
}
```

20) .eslintignore
```
node_modules
dist
build
.todo
```

21) .prettierignore
```
node_modules
dist
build
```

22) README.md
```md
# React 18 + TypeScript + Vite + Tailwind Scaffold

A complete, production-ready React 18 scaffold using TypeScript, Vite, and TailwindCSS.
Entry point: public/index.html

What’s included
- Public entry: public/index.html
- TS + TSX with React 18 ecosystem
- Vite config for fast HMR
- Tailwind CSS setup and a minimal design system (Button, Card, Nav)
- Hooks: useToggle, useFetch
- Utils: formatDate, classNames
- Types: Product type, plus basic global types
- Example usage: Hello World and a small product grid
- ESLint + Prettier for linting/formatting
- README with setup and run instructions

Getting started
- Install dependencies:
  npm install
- Run in development:
  npm run dev
- Build for production:
  npm run build
- Preview production build:
  npm run preview

Notes
- The app uses public/index.html as the entry point (as requested).
- Hello World is displayed prominently in the header.

```

What you can customize
- Tailwind theme and colors in tailwind.config.cjs
- Product source URL in App.tsx (or adapt useFetch usage)
- Extend Card and Nav with more reusable components
- Add more pages and routes if needed (e.g., with React Router)

If you want me to tailor the scaffold to a specific API shape, add more pages, or wire up a real backend, tell me the target API and I’ll adjust the example accordingly.